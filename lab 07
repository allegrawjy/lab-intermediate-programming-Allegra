# 1. Fraction
class Fraction:
    def _init_(self, numerator=0, denominator=1):
        if denominator == 0:
            raise ZeroDivisionError("Denominator cannot be zero.")
        if not isinstance(numerator, int) or not isinstance(denominator, int):
            raise TypeError("The numerator and denominator must be integers.")
        if numerator == 0:
            self._numerator = 0
            self._denominator = 1
        else:
            if (numerator < 0 and denominator >= 0) or (numerator >= 0 and denominator < 0):
                sign = -1
            else:
                sign = 1
            a = abs(numerator)
            b = abs(denominator)
            while b != 0:
                a, b = b, a % b
            self._numerator = abs(numerator) // a * sign
            self._denominator = abs(denominator) // a

    def _add_(self, other):
        if isinstance(other, Fraction):
            new_numerator = self._numerator * other._denominator + self._denominator * other._numerator
            new_denominator = self._denominator * other._denominator
            return Fraction(new_numerator, new_denominator)
        elif isinstance(other, int):
            return self + Fraction(other)
        else:
            return NotImplemented

    def _sub_(self, other):
        if isinstance(other, Fraction):
            new_numerator = self._numerator * other._denominator - self._denominator * other._numerator
            new_denominator = self._denominator * other._denominator
            return Fraction(new_numerator, new_denominator)
        elif isinstance(other, int):
            return self - Fraction(other)
        else:
            return NotImplemented

    def _mul_(self, other):
        if isinstance(other, Fraction):
            new_numerator = self._numerator * other._numerator
            new_denominator = self._denominator * other._denominator
            return Fraction(new_numerator, new_denominator)
        elif isinstance(other, int):
            return self * Fraction(other)
        else:
            return NotImplemented

    def _truediv_(self, other):
        if isinstance(other, Fraction):
            if other._numerator == 0:
                raise ZeroDivisionError("Cannot divide by zero.")
            new_numerator = self._numerator * other._denominator
            new_denominator = self._denominator * other._numerator
            return Fraction(new_numerator, new_denominator)
        elif isinstance(other, int):
            return self / Fraction(other)
        else:
            return NotImplemented

    def _eq_(self, other):
        if isinstance(other, Fraction):
            return self._numerator * other._denominator == self._denominator * other._numerator
        return NotImplemented

    def _lt_(self, other):
        if isinstance(other, Fraction):
            return self._numerator * other._denominator < self._denominator * other._numerator
        return NotImplemented

    def _le_(self, other):
        if isinstance(other, Fraction):
            return self._numerator * other._denominator <= self._denominator * other._numerator
        return NotImplemented

    def _gt_(self, other):
        if isinstance(other, Fraction):
            return self._numerator * other._denominator > self._denominator * other._numerator
        return NotImplemented

    def _ge_(self, other):
        if isinstance(other, Fraction):
            return self._numerator * other._denominator >= self._denominator * other._numerator
        return NotImplemented

    def _float_(self):
        return self._numerator / self._denominator

    def _int_(self):
        return self._numerator // self._denominator

    def _repr_(self):
        return f"Fraction({self._numerator}, {self._denominator})"

    def _str_(self):
        return f"{self._numerator}/{self._denominator}"


# 2. Class Variable - bank account
class BankAccount:
    account_counter = 0

    def _init_(self, balance=0):
        self.balance = balance
        self.account_number = BankAccount.account_counter
        BankAccount.account_counter += 1

    def get_account_number(self):
        return self.account_number


class Family:
    def _init_(self, father, mother, *children):
        self.father = father
        self.mother = mother
        self.children = list(children)

    def _iter_(self):
        return iter(self.children)

    def add_child(self, child):
        self.children.append(child)


# 3. Family